-- Pull in the wezterm API
local wezterm = require 'wezterm'

-- This table will hold the configuration.
local config = {}
local act = wezterm.action
local mux = wezterm.mux

-- In newer versions of wezterm, use the config_builder which will
-- help provide clearer error messages
if wezterm.config_builder then
  config = wezterm.config_builder()
end

-- This is where you actually apply your config choices

-- Set leader key (Ctrl+b for tmux compatibility)
config.leader = {
  key = 'b',
  mods = 'CTRL',
  timeout_milliseconds = 1000,
}

config.disable_default_key_bindings = true

config.keys = {
  -- Tmux-compatible keybindings
  -- Leader key sends itself when pressed twice
  {
    key = 'b',
    mods = 'LEADER',
    action = act.SendKey { key = 'b', mods = 'CTRL' },
  },

  -- Copy/paste
  {{ if eq .chezmoi.os "darwin" }}
  {
    key = 'c',
    mods = 'SUPER',
    action = act.CopyTo 'Clipboard',
  },
  {
    key = 'v',
    mods = 'SUPER',
    action = act.PasteFrom 'Clipboard',
  },
  {{ else }}
  {
    key = 'c',
    mods = 'CTRL|SHIFT',
    action = act.CopyTo 'Clipboard',
  },
  {
    key = 'v',
    mods = 'CTRL|SHIFT',
    action = act.PasteFrom 'Clipboard',
  },
  {{ end }}

  -- Copy mode
  {
    key = '[',
    mods = 'LEADER',
    action = act.ActivateCopyMode,
  },
  {
    key = ']',
    mods = 'LEADER',
    action = act.PasteFrom 'Clipboard',
  },

  -- Tab management
  {
    key = 'c',
    mods = 'LEADER',
    action = act.SpawnTab 'CurrentPaneDomain',
  },
  {
    key = 'n',
    mods = 'LEADER',
    action = act.ActivateTabRelative(1),
  },
  {
    key = 'p',
    mods = 'LEADER',
    action = act.ActivateTabRelative(-1),
  },
  {
    key = '&',
    mods = 'LEADER|SHIFT',
    action = act.CloseCurrentTab { confirm = true },
  },

  -- Window navigation (0-9)
  { key = '0', mods = 'LEADER', action = act.ActivateTab(0) },
  { key = '1', mods = 'LEADER', action = act.ActivateTab(1) },
  { key = '2', mods = 'LEADER', action = act.ActivateTab(2) },
  { key = '3', mods = 'LEADER', action = act.ActivateTab(3) },
  { key = '4', mods = 'LEADER', action = act.ActivateTab(4) },
  { key = '5', mods = 'LEADER', action = act.ActivateTab(5) },
  { key = '6', mods = 'LEADER', action = act.ActivateTab(6) },
  { key = '7', mods = 'LEADER', action = act.ActivateTab(7) },
  { key = '8', mods = 'LEADER', action = act.ActivateTab(8) },
  { key = '9', mods = 'LEADER', action = act.ActivateTab(9) },

  -- Window/pane management
  {
    key = 'r',
    mods = 'LEADER',
    action = act.ReloadConfiguration,
  },
  {
    key = 'w',
    mods = 'LEADER',
    action = act.ShowTabNavigator,
  },
  {
    key = 'k',
    mods = 'LEADER',
    action = act.ClearScrollback 'ScrollbackOnly',
  },
  {
    key = 'x',
    mods = 'LEADER',
    action = act.CloseCurrentPane { confirm = true },
  },

  -- Split panes (tmux style)
  {
    key = '%',
    mods = 'LEADER|SHIFT',
    action = act.SplitPane {
      direction = 'Right',
      size = { Percent = 50 },
    },
  },
  {
    key = '"',
    mods = 'LEADER|SHIFT',
    action = act.SplitPane {
      direction = 'Down',
      size = { Percent = 50 },
    },
  },

  -- Zoom pane
  {
    key = 'z',
    mods = 'LEADER',
    action = act.TogglePaneZoomState,
  },

  -- Rotate panes
  {
    key = 'o',
    mods = 'LEADER',
    action = act.RotatePanes 'Clockwise',
  },

  -- Swap panes
  {
    key = 's',
    mods = 'LEADER',
    action = act.PaneSelect {
      mode = 'SwapWithActive',
    },
  },

  -- Navigate panes with arrow keys
  {
    key = 'LeftArrow',
    mods = 'LEADER',
    action = act.ActivatePaneDirection 'Left',
  },
  {
    key = 'RightArrow',
    mods = 'LEADER',
    action = act.ActivatePaneDirection 'Right',
  },
  {
    key = 'DownArrow',
    mods = 'LEADER',
    action = act.ActivatePaneDirection 'Down',
  },
  {
    key = 'UpArrow',
    mods = 'LEADER',
    action = act.ActivatePaneDirection 'Up',
  },

  -- Navigate panes with vi keys
  {
    key = 'h',
    mods = 'LEADER',
    action = act.ActivatePaneDirection 'Left',
  },
  {
    key = 'l',
    mods = 'LEADER',
    action = act.ActivatePaneDirection 'Right',
  },
  {
    key = 'j',
    mods = 'LEADER',
    action = act.ActivatePaneDirection 'Down',
  },
  {
    key = 'k',
    mods = 'LEADER',
    action = act.ActivatePaneDirection 'Up',
  },

  -- Detach domain
  {
    key = 'd',
    mods = 'LEADER',
    action = act.DetachDomain 'CurrentPaneDomain',
  },

  -- Select pane
  {
    key = 'w',
    mods = 'LEADER',
    action = act.PaneSelect,
  },

  -- Search
  {
    key = 'f',
    mods = 'LEADER',
    action = act.Search 'CurrentSelectionOrEmptyString',
  },
}

config.mouse_bindings = {
  -- Open URLs with CMD/CTRL+Click
  {
    event = { Up = { streak = 1, button = 'Left' } },
    mods = {{ if eq .chezmoi.os "darwin" }}'CMD'{{ else }}'CTRL'{{ end }},
    action = act.OpenLinkAtMouseCursor,
  },
}

-- Set coloring for inactive panes to be less bright than your active pane
config.inactive_pane_hsb = {
  hue = 1,
  saturation = 0.8,
  brightness = 0.8,
}

-- Essential configuration
config.audible_bell = 'Disabled'
config.color_scheme = 'Catppuccin Mocha'
config.enable_kitty_keyboard = true
config.enable_scroll_bar = true
config.font = wezterm.font_with_fallback { 'FiraCode Nerd Font', 'Fira Code', 'monospace' }
config.font_size = 14.0
config.force_reverse_video_cursor = true
config.hide_tab_bar_if_only_one_tab = true
config.hyperlink_rules = wezterm.default_hyperlink_rules()
config.pane_focus_follows_mouse = false
config.scrollback_lines = 5000
config.switch_to_last_active_tab_when_closing_tab = true
config.tab_bar_at_bottom = true
config.scroll_to_bottom_on_input = true
config.show_new_tab_button_in_tab_bar = false
config.term = 'wezterm'
config.use_dead_keys = true
config.use_fancy_tab_bar = false
config.window_padding = { left = 0, right = 0, top = 0, bottom = '.5cell' }

-- Platform-specific configuration
{{ if eq .chezmoi.os "darwin" }}
config.native_macos_fullscreen_mode = true

-- Handle startup (maximize window on macOS)
wezterm.on("gui-startup", function()
  local tab, pane, window = mux.spawn_window({})
  window:gui_window():maximize()
end)
{{ else }}
-- Linux specific settings
config.use_ime = false
{{ end }}

config.mux_env_remove = {
  'SSH_AUTH_SOCK',
  'SSH_CLIENT',
}

config.prefer_to_spawn_tabs = true
config.hide_mouse_cursor_when_typing = true

return config
