# chezmoi:template:left-delimiter="# [[" right-delimiter="]] #"
# Fish shell aliases
# This file contains all aliases used in the fish shell configuration

###########################################
# FILE SYSTEM ALIASES
###########################################

# Set up aliases for eza if installed
if type -q eza
    alias ls="eza --group-directories-first"
    alias ll="eza -lh --group-directories-first"
    alias la="eza -lah --group-directories-first"
    alias lt="eza -T --group-directories-first"
end

# Use bat instead of cat if installed
if type -q bat
    # Function to determine if we're in VS Code's integrated terminal
    function is_vscode_terminal
        test -n "$VSCODE_INJECTION" -o -n "$VSCODE_PID"
    end

    # Smart bat function that handles VS Code terminal
    function smart_bat
        if is_vscode_terminal
            if test -t 1  # If output is going to a terminal
                command bat --style=numbers,changes --pager="less -FRX" $argv
            else
                command bat --style=plain --color=always --pager=never $argv
            end
        else
            command bat --style=auto $argv
        end
    end

    # Set bat aliases
    alias cat="smart_bat"
else
    # Fallback to plain cat if bat is not installed
    alias cat="command cat"
end

# Use fd instead of find if installed
if type -q fd
    alias find="fd"
end

###########################################
# GIT ALIASES
###########################################

# Set up git aliases
if type -q git
    alias g="git"
    alias gs="git status"
    alias ga="git add"
    alias gc="git commit"
    alias gp="git push"
    alias gl="git pull"
    alias gd="git diff"
    alias gco="git checkout"
    alias gb="git branch"
    alias glog="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
end

# GitHub CLI aliases if installed
if type -q gh
    alias ghpr="gh pr create"
    alias ghprv="gh pr view"
    alias ghprl="gh pr list"
end

###########################################
# EDITOR ALIASES
###########################################

# Neovim aliases and setup
if type -q nvim
    alias vim="nvim"
    alias vi="nvim"
    alias v="nvim"
end

###########################################
# PROHIBITED SOFTWARE ALIASES
###########################################

# Block conda/miniconda/anaconda installation attempts
function conda
    echo "â›” Conda is not allowed in this environment."
    echo "Please use alternative Python environment tools like venv, virtualenv, or uv."
    echo "See $HOME/.local/share/conda_warning.txt for more information."
    return 1
end

function miniconda
    conda
end

function anaconda
    conda
end

function mamba
    conda
end

###########################################
# UTILITY FUNCTIONS
###########################################

# Continuously display file content with syntax highlighting
function watch-file --description "Watch file with syntax highlighting" --argument-names file language
    # Display help if no arguments or --help flag
    if test -z "$file" || test "$file" = "--help"
        echo "Usage: watch-file <filename> [language] [--bat-args \"bat arguments\"]"
        echo ""
        echo "Arguments:"
        echo "  <filename>         File to watch"
        echo "  [language]         Optional language for syntax highlighting (e.g., json, yaml, python)"
        echo "                     Only needed if bat can't auto-detect the language correctly"
        echo "  [--bat-args \"...\"] Optional arguments to pass directly to bat"
        echo ""
        echo "Examples:"
        echo "  watch-file server.log                     # Auto-detect syntax"
        echo "  watch-file data.txt json                  # Force JSON highlighting"
        echo "  watch-file log.txt --bat-args \"--plain\"   # Pass args to bat"
        echo ""
        echo "Common bat arguments:"
        echo "  --theme=<theme>    Set the color theme"
        echo "  --plain            Disable all decorations"
        echo "  --style=<style>    Comma-separated list of style components to display"
        return 1
    end

    # Parse for bat arguments
    set -l bat_args "--paging=never"
    set -l file_to_watch $file
    set -l lang $language

    # Check for --bat-args flag in arguments
    set -l args_index (contains -i -- "--bat-args" $argv)
    if test -n "$args_index" && test $args_index -gt 0 && test (count $argv) -gt $args_index
        # Get the bat arguments
        set bat_args "$bat_args $argv[(math $args_index + 1)]"
        # If language is actually bat args, clear it
        if test "$args_index" = 2
            set lang ""
        end
    end

    # Use tail to follow the file and pipe to bat for syntax highlighting
    if type -q bat
        if test -n "$lang"
            # Use specified language
            echo "Watching $file_to_watch with language: $lang"
            tail -f "$file_to_watch" | eval "bat $bat_args --language=$lang"
        else
            # Let bat auto-detect the syntax
            echo "Watching $file_to_watch with auto-detected language"
            tail -f "$file_to_watch" | eval "bat $bat_args"
        end
    else
        # Fallback to plain tail -f
        echo "Watching $file_to_watch (bat not installed, using plain tail)"
        tail -f "$file_to_watch"
    end
end

# Run command in the background with nohup
function launch --description "Run command in the background with nohup"
    if test (count $argv) -lt 1
        echo "Usage: launch <command> [arguments...] [logfile]"
        echo "Example: launch rsync -avz src/ dest/ log.txt"
        return 1
    end

    # Extract the command name (first argument)
    set -l cmd_name $argv[1]

    # Get all but the last argument (potential commands and args)
    set -l args_no_last $argv[1..-2]

    # Get the last argument (potential logfile)
    set -l last_arg $argv[-1]

    # Check if the last argument might be a logfile (ends with .log)
    if string match -q "*.log" $last_arg
        set logfile $last_arg
        set cmd_args $args_no_last
    else
        # Default log file
        set logfile "nohup.log"
        set cmd_args $argv
    end

    # Convert arguments array to string
    set -l cmd_str (string join " " $cmd_args)

    # Run the command with nohup
    echo "Starting command in background: $cmd_str"
    echo "Log file: $logfile"

    # Execute the command with nohup and redirect output to the log file
    nohup sh -c "$cmd_str" > "$logfile" 2>&1 &

    # Get the PID of the background process
    set -l pid $last_pid
    echo "Process started with PID: $pid"
    echo "To watch the log: watch-file $logfile"
end

# Add completion for the launch command
# Use the standard command completion for the first argument
complete -c launch -n "__fish_is_first_token" -a "(__fish_complete_command)"
