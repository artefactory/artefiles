# Configuration for git-cliff changelog generator
# See https://git-cliff.org/docs/configuration

[changelog]
# Changelog header
header = """
# Changelog

All notable changes to this project will be documented in this file.
"""
# File to write the changelog to
output = "CHANGELOG.md"
# Template for the changelog body
body = """
{% if version %}
## {{ version | trim_start_matches(pat="v") }} ({{ timestamp | date(format="%Y-%m-%d") }})
{% else %}
## [Unreleased]
{% endif %}
{% for group, commits in commits | group_by(attribute="group") %}
### {{ group | upper_first }}
{% for commit in commits %}
- {% if commit.breaking %}**BREAKING**: {% endif %}{{ commit.message | upper_first }}{% if commit.id %} ([{{ commit.id | truncate(length=7, end="") }}]({{ commit.id }})){% endif %}
{% endfor %}
{% endfor %}
"""
# Template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# Remove the leading and trailing whitespace from the templates
trim = true

[git]
# Parse the commits based on conventional commits
conventional_commits = true
# Filter out commits that are not conventional
filter_unconventional = true
# Process each line of a commit as an individual commit
split_commits = false
# Regex for parsing and grouping commits
commit_parsers = [
  {message = "^feat", group = "Features"},
  {message = "^fix", group = "Bug Fixes"},
  {message = "^test", group = "Tests"},
  {message = "^chore.*[Cc]hangelog", skip = true},
  {message = "^chore", group = "Chores"}
]
# Protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = true
# Filter out the commits that are not matched by commit parsers
filter_commits = false
# Tag pattern to select Git tags
tag_pattern = "v[0-9]*"
# Sort the tags chronologically
date_order = false
# Sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
